// -*- C++ -*-
#ifndef CHARACTERS_H
#define CHARACTERS_H

// 255 ASCII IBM CP437
typedef enum {
    CHAR_NULL = 0,
    CHAR_SMILEY,
    CHAR_SMILEY_DARK,
    CHAR_HEART,
    CHAR_DIAMOND,
    CHAR_CLUB,
    CHAR_SPADE,
    CHAR_BALL,
    CHAR_BALL_DARK,
    CHAR_RINGU,
    CHAR_RINGU_DARK,
    CHAR_MALE,
    CHAR_FEMALE,
    CHAR_MUSIC,
    CHAR_MUSIC2,
    CHAR_URCHIN,
    CHAR_RARROW_THICK,
    CHAR_LARROW_THICK,
    CHAR_UPDOWN_ARROWS,
    CHAR_DOUBLE_EX_MARK,
    CHAR_WEIRD_P,
    CHAR_PARAGRAPH,
    CHAR_UNDERSCORE_THICK,
    CHAR_UPDOWN_ARROWS_DOWN,
    CHAR_UP_ARROW,
    CHAR_DOWN_ARROW,
    CHAR_RARROW,
    CHAR_LARROW,
    CHAR_SMALL_L,
    CHAR_LR_ARROWS,
    CHAR_UP_ARROW_THICK,
    CHAR_DOWN_ARROW_THICK,
    CHAR_SPACE,
    CHAR_EX_MARK,
    CHAR_DOUBLE_QUOTE,
    CHAR_HASH,
    CHAR_DOLLAR,
    CHAR_PERCENT,
    CHAR_AMPERSAND,
    CHAR_APOSTROPHE,
    CHAR_LEFT_BRACKET,
    CHAR_RIGHT_BRACKET,
    CHAR_STAR,
    CHAR_PLUS,
    CHAR_COMMA,
    CHAR_DASH,
    CHAR_FULLSTOP,
    CHAR_SLASH,
    CHAR_0,
    CHAR_1,
    CHAR_2,
    CHAR_3,
    CHAR_4,
    CHAR_5,
    CHAR_6,
    CHAR_7,
    CHAR_8,
    CHAR_9,
    CHAR_COLON,
    CHAR_SEMICOLON,
    CHAR_LESS_THAN,
    CHAR_EQUAL,
    CHAR_GREATER_THAN,
    CHAR_QUESTION_MARK,
    CHAR_AT,
    CHAR_A,
    CHAR_B,
    CHAR_C,
    CHAR_D,
    CHAR_E,
    CHAR_F,
    CHAR_G,
    CHAR_H,
    CHAR_I,
    CHAR_J,
    CHAR_K,
    CHAR_L,
    CHAR_M,
    CHAR_N,
    CHAR_O,
    CHAR_P,
    CHAR_Q,
    CHAR_R,
    CHAR_S,
    CHAR_T,
    CHAR_U,
    CHAR_V,
    CHAR_W,
    CHAR_X,
    CHAR_Y,
    CHAR_Z,
    CHAR_LEFT_SQUARE_BRACKET,
    CHAR_BACKSLASH,
    CHAR_RIGHT_SQUARE_BRACKET,
    CHAR_HAT,
    CHAR_UNDERSCORE,
    CHAR_BACKQUOTE,
    CHAR_a,
    CHAR_b,
    CHAR_c,
    CHAR_d,
    CHAR_e,
    CHAR_f,
    CHAR_g,
    CHAR_h,
    CHAR_i,
    CHAR_j,
    CHAR_k,
    CHAR_l,
    CHAR_m,
    CHAR_n,
    CHAR_o,
    CHAR_p,
    CHAR_q,
    CHAR_r,
    CHAR_s,
    CHAR_t,
    CHAR_u,
    CHAR_v,
    CHAR_w,
    CHAR_x,
    CHAR_y,
    CHAR_z,
    CHAR_LEFT_CURLY_BRACE,
    CHAR_PIPE,
    CHAR_RIGHT_CURLY_BRACE,
    CHAR_TILDE,
    CHAR_TRIANGLE,
    CHAR_C_CEDILLA,
    CHAR_u_DIA,
    CHAR_e_ACUTE,
    CHAR_a_DIA,
    CHAR_a_GRAVE,
    CHAR_a_RING,
    CHAR_c_CEDILLA,
    CHAR_e_HAT,
    CHAR_e_DIA,
    CHAR_e_GRAVE,
    CHAR_i_DIA,
    CHAR_i_HAT,
    CHAR_i_GRAVE,
    CHAR_A_DIA,
    CHAR_A_RING,
    CHAR_E_ACUTE,
    CHAR_ae,
    CHAR_AE,
    CHAR_o_HAT,
    CHAR_o_DIA,
    CHAR_o_GRAVE,
    CHAR_u_HAT,
    CHAR_u_GRAVE,
    CHAR_y_DIA,
    CHAR_O_DIA,
    CHAR_U_DIA,
    CHAR_CENT,
    CHAR_POUND,
    CHAR_YEN,
    CHAR_PESETA,
    CHAR_SEA_HORSE,
    CHAR_a_ACUTE,
    CHAR_i_ACUTE,
    CHAR_o_ACUTE,
    CHAR_u_ACUTE,
    CHAR_n_TILDE,
    CHAR_N_TILDE,
    CHAR_FEM_ORD,
    CHAR_MASC_ORD,
    CHAR_INV_QUESTION_MARK,
    CHAR_REVERSE_NOT,
    CHAR_NOT,
    CHAR_HALF_FRACTION,
    CHAR_QUARTER_FRACTION,
    CHAR_INVERTED_EX_MARK,
    CHAR_LEFT_FRENCH_QUOTE,
    CHAR_RIGHT_FRENCH_QUOTE,
    CHAR_LIGHT_SHADE,
    CHAR_MEDIUM_SHADE,
    CHAR_DARK_SHADE,
    CHAR_BD_VERTICAL,
    CHAR_BD_VERTICAL_LEFT,
    CHAR_BD_VERTICAL_DOUBLE_LEFT,
    CHAR_BD_DOUBLE_VERTICAL_LEFT,
    CHAR_BD_DOUBLE_DOWN_LEFT,
    CHAR_BD_DOWN_DOUBLE_LEFT,
    CHAR_BD_DOUBLE_VERTICAL_DOUBLE_LEFT, //error is around here
    CHAR_BD_DOUBLE_VERTICAL,
    CHAR_BD_DOUBLE_DOWN_DOUBLE_LEFT,
    CHAR_BD_DOUBLE_UP_DOUBLE_LEFT,
    CHAR_BD_DOUBLE_UP_LEFT,
    CHAR_BD_VERTICAL_DOWN_LEFT,
    CHAR_BD_UP_RIGHT,//
    CHAR_BD_UP_HORIZONTAL,
    CHAR_BD_DOWN_HORIZONTAL,
    CHAR_BD_VERTICAL_RIGHT,
    CHAR_BD_HORIZONTAL,
    CHAR_BD_VERTICAL_HORIZONTAL,
    CHAR_BD_VERTICAL_DOUBLE_RIGHT,
    CHAR_BD_DOUBLE_VERTICAL_RIGHT,
    CHAR_BD_DOUBLE_UP_RIGHT,
    CHAR_BD_DOUBLE_DOWN_RIGHT,
    CHAR_BD_DOUBLE_UP_HORIZONTAL,
    CHAR_BD_DOUBLE_DOWN_HORIZONTAL,
    CHAR_BD_DOUBLE_VERTICAL_DOUBLE_RIGHT,
    CHAR_BD_DOUBLE_HORIZONTAL,
    CHAR_BD_DOUBLE_VERTICAL_HORIZONTAL,
    CHAR_BD_UP_DOUBLE_HORIZONTAL,
    CHAR_BD_DOWN_DOUBLE_HORIZONTAL,
    CHAR_BD_DOUBLE___DOWN_HORIZONTAL,
    CHAR_BD_DOUBLE___UP_RIGHT,
    CHAR_BD_UP_DOUBLE_RIGHT,
    CHAR_BD_DOWN_RIGHT_DOUBLE,
    CHAR_BD_DOUBLE___DOWN_RIGHT,
    CHAR_BD_DOUBLE___VERTICAL_HORIZONTAL,
    CHAR_BD_VERTICAL_DOUBLE_HORIZONTAL,
    CHAR_BD_UP_LEFT,
    CHAR_BD_DOWN_RIGHT,
    CHAR_FULL_BLOCK,
    CHAR_LOWER_HALF_BLOCK,
    CHAR_LEFT_HALF_BLOCK,
    CHAR_RIGHT_HALF_BLOCK,
    CHAR_UPPER_HALF_BLOCK,
    CHAR_alpha,
    CHAR_SHARP_S,
    CHAR_GAMMA,
    CHAR_pi,
    CHAR_SIGMA,
    CHAR_sigma,
    CHAR_MICRO,
    CHAR_TAU,
    CHAR_PHI,
    CHAR_THETA,
    CHAR_OMEGA,
    CHAR_DELTA,
    CHAR_INFINITY,
    CHAR_phi,
    CHAR_epsilon,
    CHAR_INTERSECTION,
    CHAR_INDENTICAL,
    CHAR_PLUS_MINUS,
    CHAR_GREATER_EQUAL,
    CHAR_LOWER_EQUAL,
    CHAR_TOP_HALF_INTEGRAL,
    CHAR_BOT_HALF_INTEGRAL,
    CHAR_DIVISION,
    CHAR_WAVES,
    CHAR_DEGREE,
	CHAR_BULLET_OPERATOR,
    CHAR_MIDDLE_DOT,
    CHAR_SQUARE_ROOT,
    CHAR_TOP_n,
    CHAR_TOP_2,
    CHAR_SQUARE_DARK,
    CHAR_NO_BREAK_SPACE
} CHARS;

typedef struct {
    int char_x;
    int char_y;
} CHAR_DATA;

CHAR_DATA get_ascii(CHARS c);
CHAR_DATA get_ascii(int c, int X, int Y);

#endif
